## Démonstration

Comprendre par l'exemple

/*
Projet SpringBoot simple
133 dépendances pour un total de 45 Mo
*/

## v0: 🛑 Le Dockerfile à ne pas faire .[sbs]

```dockerfile
FROM eclipse-temurin:17-jdk
COPY . .
CMD ./mvnw spring-boot:run
```

/*
Facile, mais pas propre
From: image depuis laquelle on part
Copy: copie des fichiers dans l'image
Cmd: commande à exécuter au démarrage
*/

## v0: 🛑 Le Dockerfile à ne pas faire .[sbs]

### Métriques

- Taille de l'image: **427M**
- Temps de build initial: **1s**
- Temps de rebuild: **équivalent**
- Temps de 1er accès: **20s**
- Utilisateur: **root**
- Précense du JDK: **Oui**

<div class="step" markdown>

### Problèmes

- Chargement des libs au démarrage 🐌
- Besoin d'internet pour démarrer 🌐
- Image lourde 🪨
- Contient le JDK 🐛
- Utilisateur root 🧑‍💻
</div>

/*
Problèmes:
Chargement des libs au démarrage 
donc, besoin d'internet pour démarrer
Image lourde
Contient le JDK
Utilisateur root
*/


## v1: Le Dockerfile de base .[sbs]

/*
On compile le projet avec maven
On renome le jar pour qu'il soit plus facilement accessible
On modifie la commande de démarrage pour lancer le jar
*/

```dockerfile
FROM eclipse-temurin:17-jdk
COPY . .
RUN ./mvnw clean package -DskipTests
RUN mv target/*.jar app.jar
CMD ["java","-jar","app.jar"]
```

## v1: Le Dockerfile de base .[sbs]

### Métriques

- Taille de l'image: **541M**
- Temps de build initial: **20s**
- Temps de rebuild: **équivalent**
- Temps de 1er accès: **3s**
- Utilisateur: **root**
- Précense du JDK: **Oui**

### Problèmes

- Image lourde 🪨
- Contient le JDK 🐛
- Chargement des libs à chaque build 📚
- Utilisateur root 🧑‍💻

<div class="step" markdown>
### Du mieux

- Amélioration du temps de démarrage 🚀
- Plus besoin d'accès internet ⛓️‍💥
</div>

/*
dépendances à la compilation => 

Amélioration du temps de démarrage
Plus besoin d'accès internet
*/

## v2: Tranformation pour Dofigen .[sbs]

```yaml
from: eclipse-temurin:17-jdk
add:
  - "."
root:
  run:
    - ./mvnw clean package -DskipTests
    - mv target/*.jar app.jar
cmd: ["java","-jar","app.jar"]
```

/*
On prend les champs correspondants aux commandes du Dockerfile
Le seul changement est la définition de la commande en tant que root, car par défaut non-root
*/

## v2: Tranformation pour Dofigen .[sbs]

### Métriques

- Taille de l'image: **521M**
- Temps de build initial: **20s**
- Temps de rebuild: **équivalent**
- Temps de 1er accès: **3s**
- Utilisateur: **1000**
- Précense du JDK: **Oui**

### Problèmes

- Image lourde 🪨
- Contient le JDK 🐛
- Chargement des libs à chaque build 📚

<div class="step" markdown>
### Du mieux

- Utilisateur non-root 😷
- On gagne 20M sur l'image 💇

/*
Utilisateur non root
20 Mo de moins: pas grand chose, équivalent à une coupe de cheuveux
C'est dû aux RUN passés sur une seule commande
*/
</div>

## v3: Optimiser la taille de l'image .[sbs]

```yaml
builders:
  - from: maven:3.9-eclipse-temurin-17-alpine
    add:
      - "."
    root:
      run:
        - mvn clean package -DskipTests
from: eclipse-temurin:17-jre-alpine
artifacts:
  - builder: builder-0
    source: target/*.jar
    target: app.jar
cmd: ["java","-jar","app.jar"]
```

/*
Définition d'un builder basé sur une image maven alpine (légère)
Utilisation de maven sans wrapper
Image finale basée sur JRE alpine
Récupération du JAR en tant qu'artefact depuis le builder
*/

## v3: Optimiser la taille de l'image .[sbs]

### Métriques

- Taille de l'image: **185M**
- Temps de build initial: **20s**
- Temps de rebuild: **équivalent**
- Temps de 1er accès: **3s**
- Utilisateur: **1000**
- Précense du JDK: **Non**

### Problèmes

- Chargement des libs à chaque build 📚

<div class="step" markdown>
### Du mieux

- Taille de l'image divisée par 3,5 🪶
- Plus de JDK dans l'image finale 🛡️
</div>

/*
Taille de l'image divisée par 3,5 🪶
Plus de JDK dans l'image finale 🛡️
*/

## v4: Gestion du cache .[sbs]

```yaml
builders:
  - from: maven:3.9-eclipse-temurin-17-alpine
    workdir: /app
    add:
      - "."
    root:
      run:
        - mvn package -DskipTests
        - mv target/*.jar app.jar
      cache:
        - /root/.m2
        - /app/target
from: eclipse-temurin:17-jre-alpine
artifacts:
  - builder: builder-0
    source: /app/app.jar
    target: app.jar
cmd: ["java","-jar","app.jar"]
context:
  - /pom.xml
  - /src/main/
```

/*
Ajout d'un workdir, car le cache est défini de manière absolue
Définition de deux caches:  dépendances maven + build du projet
Déplacement du jar en dehors du dossier target qui est en cache

Définition du contexte pour ne charger que ce qui est nécessaire
*/

## v4: Gestion du cache .[sbs]

### Métriques

- Taille de l'image: **185M**
- Temps de build initial: **20s**
- Temps de rebuild: **5s**
- Temps de 1er accès: **3s**
- Utilisateur: **1000**
- Précense du JDK: **Non**

<div class="step" markdown>
### Du mieux

- Chargement des libs une fois 🎒
- Temps de rebuild divisé par 4 ⌛

/*
Il garde les libs dans le cache, et ne les recharge pas à chaque build
*/
</div>

## v4: Gestion du cache .[sbs]

/*
Voici à quoi ressemble le Dockerfile final
*/

```dockerfile
# syntax=docker/dockerfile:1.4

# builder-0
FROM maven:3.9-eclipse-temurin-17-alpine AS builder-0
WORKDIR /app
ADD --link . ./
USER 0
RUN \
    --mount=type=cache,sharing=locked,uid=0,gid=0,target=/root/.m2\
    --mount=type=cache,sharing=locked,uid=0,gid=0,target=/app/target\
    mvn package -DskipTests && \
    mv target/*.jar app.jar

# runtime
FROM eclipse-temurin:17-jre-alpine AS runtime
COPY --link --chown=1000:1000 --from=builder-0 "/app/app.jar" "app.jar"
USER 1000
CMD ["java","-jar","app.jar"]
```
