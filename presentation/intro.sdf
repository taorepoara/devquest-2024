
## 🤔 Problèmes avec les Dockerfile .[steps]

// En tant que dev, on a beaucoup de sujets à traîter, les tests, la sécurité, la performance, la lisibilité, la maintenabilité, etc.
// Et on a pas forcément envie de passer du temps à comprendre comment fonctionne la création de conteneurs pour déployer nos projets.
// J'ai créé Dofigen pour essayer de simplifier la création de Dockerfile et de rendre cette tâche plus accessible.
/*
dev: beaucoup de sujets à traiter: tests, sécurité, performance, lisibilité, maintenabilité, etc.
pas le temps et l'envie de comprendre les conteneurs
*/

/*
sondage: qui est dev ? qui a déjà utilisé écrit un Dockerfile ? qui comprends le principe des layers et le cache de build ?
*/

/*
- langage: pas envie, on dirait du Cobol
- syntaxe: pas simple d'analyser ou de modifier un Dockerfile via un script
- Dockerfile longs: les layers et builders pas toujours bien compris
- bonnes pratiques: root par défaut + .gitingore fonctionnent à l'inverse selon moi
*/

- Nouveau "langage" à apprendre
- Une syntaxe en commandes
- Les Dockerfile sont souvent longs et complexes
- Pas de "bonnes pratiques" évidentes de base

## Comment Dofigen tente de répondre à ces problèmes .[steps]

/*
Dofigen est un outil qui permet de générer des Dockerfile.

- yaml: simple à lire et à écrire + facile à modifier via un script (yq, jq) + avantages du YAML
- layers: ordre des définitions n'a pas d'importance (dans un même niveau) + Gestion de cache plus simple
- syntaxe: facile de voir les builders
- bonnes pratiques: rootless par défaut + `.gitignore` dans le même fichier
*/

- Définition de la configuration en YAML (ou JSON) 🧑‍💻
- Abstraction du concept de layers 📦
- Syntaxe plus simple à lire et à écrire 📝
- Bonnes pratiques par défaut 😇
